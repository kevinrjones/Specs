// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GameOfLifeSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GameOfLife")]
    public partial class GameOfLifeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GameOfLife.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GameOfLife", "In order to play the game of life\r\nAs a player\r\nI want to watch the world progres" +
                    "s", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An empty world stays empty")]
        public virtual void AnEmptyWorldStaysEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An empty world stays empty", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have an empty world");
#line 8
 testRunner.When("The clock ticks 1 time(s)");
#line 9
 testRunner.Then("the world stays empty");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A cell with one adjacent cells that cell dies when the clock ticks")]
        public virtual void ACellWithOneAdjacentCellsThatCellDiesWhenTheClockTicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A cell with one adjacent cells that cell dies when the clock ticks", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
 testRunner.Given("I have a cell with 1 adjacent cells");
#line 13
 testRunner.When("The clock ticks 1 time(s)");
#line 14
 testRunner.Then("the cell dies");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A cell with four adjacent cells that cell dies when the clock ticks")]
        public virtual void ACellWithFourAdjacentCellsThatCellDiesWhenTheClockTicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A cell with four adjacent cells that cell dies when the clock ticks", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have a cell with 4 adjacent cells");
#line 18
 testRunner.When("The clock ticks 1 time(s)");
#line 19
 testRunner.Then("the cell dies");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A cell with two adjacent cells that cell lives when the clock ticks")]
        public virtual void ACellWithTwoAdjacentCellsThatCellLivesWhenTheClockTicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A cell with two adjacent cells that cell lives when the clock ticks", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
 testRunner.Given("I have a cell with 2 adjacent cells");
#line 23
 testRunner.When("The clock ticks 1 time(s)");
#line 24
 testRunner.Then("the cell lives");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A cell with three adjacent cells that cell lives when the clock ticks")]
        public virtual void ACellWithThreeAdjacentCellsThatCellLivesWhenTheClockTicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A cell with three adjacent cells that cell lives when the clock ticks", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have a cell with 3 adjacent cells");
#line 28
 testRunner.When("The clock ticks 1 time(s)");
#line 29
 testRunner.Then("the cell lives");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("An empty cell with three adjacent cells that cell comes alive when the clock tick" +
            "s")]
        public virtual void AnEmptyCellWithThreeAdjacentCellsThatCellComesAliveWhenTheClockTicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("An empty cell with three adjacent cells that cell comes alive when the clock tick" +
                    "s", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("I have an empty cell with 3 adjacent cells");
#line 33
 testRunner.When("The clock ticks 1 time(s)");
#line 34
 testRunner.Then("the cell lives");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Blinker returns to it\'s original state after two ticks")]
        public virtual void ABlinkerReturnsToItSOriginalStateAfterTwoTicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Blinker returns to it\'s original state after two ticks", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have a blinker");
#line 38
 testRunner.When("The clock ticks 2 time(s)");
#line 39
 testRunner.Then("the blinker returns to its original shapre");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A Toad returns to it\'s original state after two ticks")]
        public virtual void AToadReturnsToItSOriginalStateAfterTwoTicks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A Toad returns to it\'s original state after two ticks", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I have a toad");
#line 43
 testRunner.When("The clock ticks 2 time(s)");
#line 44
 testRunner.Then("the toad returns to its original shapre");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
